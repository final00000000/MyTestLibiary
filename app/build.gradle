apply plugin: 'com.android.application'
apply from: '../common.gradle'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.alipay.apollo.baseline.config'

android {

    // 资源目录存放指引：https://developer.android.google.cn/guide/topics/resources/providing-resources
    defaultConfig {

        // 无痛修改包名：https://www.jianshu.com/p/17327e191d2e
        applicationId As.applicationId

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a","x86_64"
        }
    }

    //签名
    signingConfigs {
        config {
            storeFile file(StoreFile)
            storePassword StorePassword
            keyAlias KeyAlias
            keyPassword KeyPassword
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "int", "CPU_TYPE", "64"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }

        release {
            debuggable true
            jniDebuggable true
            //  Zipalign优化，资源对齐
            zipAlignEnabled true
            // 混淆
            minifyEnabled false
            // 移除无用的resource文件 必须和minifyEnabled同时打开
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //运行环境
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    //定义输出文件名
    applicationVariants.all { variant ->
        variant.outputs.all {
            def appName = "demo"
            def time = releaseTime()
            def buildType = variant.buildType.name
            def newName
            if (buildType == 'debug') {
                newName = "${appName}_${defaultConfig.versionCode}_dbg.apk"
            } else {
                newName = "${appName}${defaultConfig.versionName}_${time}_prd.apk"
            }
            outputFileName = newName
        }
    }

}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation platform("com.mpaas.android:$mpaas_artifact:$mpaas_baseline")
    implementation project(':UtilsLibiary')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.mpaas.android:scan'
}